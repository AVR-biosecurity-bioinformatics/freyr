/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    piperline Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    help                = null

    ///// Input options
    data_folder         = "test_data/dual"                  // location of read data; path
    refdir              = "reference"                       // location of reference databases; path
    samplesheet         = "test_data/dual/samplesheet.csv"  // location of samplesheet .csv; path   
    // samplesheet         = "inputs/samplesheet.csv"          // location of samplesheet .csv; path [DEFAULT FOR LATER ON]   
    loci_params         = "test_data/dual/loci_params.csv"  // location of locus parameters .csv; path
    // loci_params         = "inputs/loci_params.csv"          // location of locus parameters .csv; path [DEFAULT FOR LATER ON]

    extension           = null                              // extension of the .fastq read files, immediately after the digit indicating forward/reverse identity; string
    illumina            = true                              // data input is Illumina reads; boolean
    pacbio              = false                             // data input is PacBio reads; boolean
    nanopore            = false                             // data input is Nanopore reads; boolean
    paired              = true                              // Illumina data input is paired-end; boolean

    /// TODO: replace this with equivalent input-file option
    high_sensitivity    = true                              // enable dada2 high-sensitivity (pseudo-pooling) mode; boolean

    threads             = null                              // threads for multithreading; integer

    rdata               = true                              // save all data/objects from process-level R sessions as .RData files in work dir; boolean

    ///// Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'

}

profiles {
    debug {
        // 
    }
    apptainer {
        apptainer.enabled      = true
        apptainer.autoMounts   = true
        charliecloud.enabled   = false
        conda.enabled          = false
        docker.enabled         = false
        podman.enabled         = false        
        shifter.enabled        = false
        singularity.enabled    = false
    }
    //// this profile is not enabled because charliecloud does not seem to work 
    // charliecloud {
    //     apptainer.enabled      = false
    //     charliecloud.enabled   = true
    //     conda.enabled          = false
    //     docker.enabled         = false
    //     podman.enabled         = false        
    //     shifter.enabled        = false
    //     singularity.enabled    = false
    // }
    conda {
        apptainer.enabled      = false
        charliecloud.enabled   = false
        conda.enabled          = true
        docker.enabled         = false
        podman.enabled         = false        
        shifter.enabled        = false
        singularity.enabled    = false
    }
    docker {
        apptainer.enabled      = false
        charliecloud.enabled   = false
        conda.enabled          = false
        docker.enabled         = true
        docker.runOptions      = '-u $(id -u):$(id -g)'
        podman.enabled         = false        
        shifter.enabled        = false
        singularity.enabled    = false
    }
    podman {
        apptainer.enabled      = false
        charliecloud.enabled   = false
        conda.enabled          = false
        docker.enabled         = false
        podman.enabled         = true        
        shifter.enabled        = false
        singularity.enabled    = false
    }
    shifter {
        apptainer.enabled      = false
        charliecloud.enabled   = false
        conda.enabled          = false
        docker.enabled         = false
        podman.enabled         = false        
        shifter.enabled        = true
        singularity.enabled    = false
    }
    singularity {
        apptainer.enabled      = false
        charliecloud.enabled   = false
        conda.enabled          = false
        docker.enabled         = false
        podman.enabled         = false        
        shifter.enabled        = false
        singularity.enabled    = true
        singularity.autoMounts = true
    }
    basc_slurm {
        process.executor        = 'slurm'
        process.queue           = 'batch'
        params.max_memory       = '512.GB'
        params.max_time         = '168.h'
        params.max_cpus         = 72
        process.module          = 'shifter' // this runs 'module load shifter' at the start of each process job
        // process.beforeScript    = 'module load shifter' // this would also do the same thing as above line
        shifter.enabled         = true
    }
    test { /// this profile should always be specified last to force the minimal resource requirements
        params.samplesheet      = 'test_data/dual/samplesheet_read_dir.csv'
        params.loci_params      = "test_data/dual/loci_params.csv"
        params.max_memory       = '2.GB'
        params.max_time         = '10.m'
        params.max_cpus         = 1
    }
}

process {

    // error handling
    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 3
    maxErrors     = '-1'
    withLabel: error_retry {
        errorStrategy = 'retry'
        maxRetries    = 3
    }

    // resources
    withLabel: very_small {
        cpus    = { check_max( 1                  , 'cpus'    ) }
        memory  = { check_max( 2.GB * task.attempt, 'memory'  ) }
        time    = { check_max( 10.m * task.attempt, 'time'    ) }
    }
    withLabel: small {
        cpus    = { check_max( 1                  , 'cpus'    ) }
        memory  = { check_max( 4.GB * task.attempt, 'memory'  ) }
        time    = { check_max( 30.m * task.attempt, 'time'    ) }
    }
    withLabel: medium {
        cpus    = { check_max( 1                  , 'cpus'    ) }
        memory  = { check_max( 8.GB * task.attempt, 'memory'  ) }
        time    = { check_max( 1.h * task.attempt, 'time'     ) }
    }
    withLabel: high {
        cpus    = { check_max( 4 * task.attempt   , 'cpus'    ) }
        memory  = { check_max( 16.GB * task.attempt, 'memory'  ) }
        time    = { check_max( 1.h *  task.attempt, 'time'    ) }
    }
    withLabel: very_high {
        cpus    = { check_max( 16 * task.attempt  , 'cpus'    ) }
        memory  = { check_max( 64.GB * task.attempt, 'memory'  ) }
        time    = { check_max( 1.h *  task.attempt, 'time'    ) }
    }
    withLabel: long {
        time    = { check_max( 4.h * task.attempt, 'time'    ) }
    }
}



plugins {
    id 'nf-schema@2.0.0'                            // create schema to validate sample sheets and pipeline parameters
}

report {
    enabled             = true
    overwrite           = true
    file                = "output/report.html"
}

trace {
    enabled             = true
    overwrite           = true
    file                = "trace/trace.txt"
}

dag {
    enabled             = true
    overwrite           = true
    file                = "output/dag.html"
    verbose             = true
}

timeline {
    enabled             = true
    overwrite           = true
    file                = "output/timeline.html"
}

// Function to ensure that resource requirements don't go beyond a maximum limit
// from: https://github.com/nf-core/tools/blob/99961bedab1518f592668727a4d692c4ddf3c336/nf_core/pipeline-template/nextflow.config#L206-L237
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}